#include <iostream>
#include <time.h>
using namespace std;

// Chance function that returns a random number between 0 and 1
double chance()
{
	// Initialize variable random
	double random;
	// Generates a pseudo-random number
	random = (double) rand() / RAND_MAX;
	// Returns the pseudo-random number generated
	return random;
}

/*	Shoot function that takes the distance and returns the score 
	by using the random number generated by the chance function	*/
double shoot(int distance)
{
	// Assigns the pseduo-random number generated in chance to the variable attempt
	double attempt = chance();
	// Initializes variable score
	int score;
	// If statement for when the distance is 10
	if (distance == 10)
	{
		// Calculates scores based on the pseudo-random number generated
		if (attempt >= 0.00 && attempt <= 0.50)
		{
			score = 5;
		}
		else if (attempt > 0.50 && attempt <= 0.90)
		{
			score = 3;
		}
		else if (attempt > 0.90 && attempt <= 0.95)
		{
			score = 1;
		}
		else
		{
			score = 0;
		}
	}
	// If statement for when distance is 20
	else if (distance == 20)
	{
		// Calculates scores based on the pseudo-random number generated
		if (attempt >= 0.00 && attempt <= 0.40)
		{
			score = 5;
		}
		else if (attempt > 0.40 && attempt <= 0.80)
		{
			score = 3;
		}
		else if (attempt > 0.80 && attempt <= 0.90)
		{
			score = 1;
		}
		else
		{
			score = 0;
		}
	}
	// If statement for when distance is 30
	else if (distance == 30)
	{
		// Calculates scores based on the pseudo-random number generated
		if (attempt >= 0.00 && attempt <= 0.30)
		{
			score = 5;
		}
		else if (attempt > 0.30 && attempt <= 0.60)
		{
			score = 3;
		}
		else if (attempt > 0.60 && attempt <= 0.75)
		{
			score = 1;
		}
		else
		{
			score = 0;
		}
	}
	// If statement for when distance is 40
	else if (distance == 40)
	{
		// Calculates scores based on the pseudo-random number generated
		if (attempt >= 0.00 && attempt <= 0.20)
		{
			score = 5;
		}
		else if (attempt > 0.20 && attempt <= 0.40)
		{
			score = 3;
		}
		else if (attempt > 0.40 && attempt <= 0.60)
		{
			score = 1;
		}
		else
		{
			score = 0;
		}
	}
	// If statement for when distance is 50
	else if (distance == 50)
	{
		// Calculates scores based on the pseudo-random number generated
		if (attempt >= 0.00 && attempt <= 0.10)
		{
			score = 5;
		}
		else if (attempt > 0.10 && attempt <= 0.20)
		{
			score = 3;
		}
		else if (attempt > 0.20 && attempt <= 0.45)
		{
			score = 1;
		}
		else
		{
			score = 0;
		}
	}
	// Returns the score calculated
	return score;
}

// Play function that is responsible for calculating and displaying
void play()
{
	// Initialize variables score and total
	double score;
	double total = 0;
	// For loop that increases the distance by 10 for each iteration
	for (int distance = 10; distance <= 50; distance = distance + 10)
	{
		// Assign score to the score returned by the shoot function
		score = shoot(distance);
		// If statement for the specialized messages for a score of 0
		if (score == 0)
		{
			cout << "Distance " << distance << ": 0 points, what a shame!" << endl;
		}
		// If statement for the specialized messages for a score of 5
		else if (score == 5)
		{
			cout << "Distance " << distance << ": 5 points, you are awesome!" << endl;
		}
		// Else statement that outputs for a score from 2 to 4
		else
		{
			cout << "Distance " << distance << ": " << score << " points" << endl;
		}
		// Adds calculated score to the total
		total += score;
	}
	// Dashed line to separate the point calculations from the total
	cout << "---------------------------------------------------" << endl;
	// Outputs the total score from the round
	cout << "Total score: " << total << " points";
}

// Main function that drives the program and controls the rounds
int main()
{
	// Assigns the variable input to 1 in order to fulfill for requirements
	int input = 1;
	// Welcome message for simulator
	cout << "Welcome to Archery Shooting Simulator" << endl;
	// For loop that controls the rounds
	for (int i = 1; input != 0; i++)
	{
		// Call to predefined functions srand and time in loop
		srand(time(NULL));
		// Outputs round number
		cout << "Round " << i << ":" << endl;
		// Executes the play function
		play();
		// Prompt for user input to continue or exit
		cout << "\nEnter 0 to exit, any other value to play again:";
		// Takes in user input
		cin >> input;
		// Blank line for readability
		cout << "\n";
	}
	// Terminates the program
	return 0;
}